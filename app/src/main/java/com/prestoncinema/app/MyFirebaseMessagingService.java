package com.prestoncinema.app;

import android.app.PendingIntent;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.support.v4.app.NotificationCompat;
import android.support.v4.app.NotificationManagerCompat;
import android.support.v4.app.TaskStackBuilder;
import android.widget.Toast;

import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;

import java.util.Map;

import static android.util.Log.d;


/**
 * This service is used to handle incoming Firebase Cloud Messaging (FCM) notifications.
 * This is primarily used for firmware updates, with notifications generated by the Ruby on Rails
 * QA database app (via ProductDetailsController#notify_firebase)
 */
public class MyFirebaseMessagingService extends FirebaseMessagingService {
    public MyFirebaseMessagingService() {
    }

    String CHANNEL_ID = "firmwareUpdates";

    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {
        // Check if message contains a data payload.
        if (remoteMessage.getData().size() > 0) {
            final Map<String, String>  messageData = remoteMessage.getData();
            if (messageData.containsValue("firmwareUpdate")) {
                // declare the intent that happens when the user clicks on the notification
                // Go to MainActivity by default
                Intent resultIntent = new Intent(this, MainActivity.class);

                // add some extra data to the Intent so MainActivity can use it
                resultIntent.putExtra("unit", messageData.get("unit"));
                resultIntent.putExtra("version", messageData.get("version"));
                resultIntent.putExtra("changes", messageData.get("changes"));
                resultIntent.putExtra("type", "firmwareUpdate");

                // The stack builder object will contain an artificial back stack for the started Activity.
                // This ensures that navigating backward from the Activity leads out of
                // your application to the Home screen.
                TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);

                // Adds the back stack for the Intent (but not the Intent itself)
                stackBuilder.addParentStack(MainActivity.class);

                // Adds the Intent that starts the Activity to the top of the stack
                stackBuilder.addNextIntent(resultIntent);
                PendingIntent resultPendingIntent = stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);

                Bitmap largeIcon = BitmapFactory.decodeResource(getResources(), R.drawable.ic_status_bar_color);

                NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this, CHANNEL_ID)
                        .setSmallIcon(R.drawable.ic_status_bar)
                        .setLargeIcon(largeIcon)
                        .setColor(getResources().getColor(R.color.newRed))
                        .setContentTitle("Firmware Update: " + messageData.get("unit"))
                        .setContentText(messageData.get("message"))
                        .setPriority(NotificationCompat.PRIORITY_DEFAULT)
                        .setContentIntent(resultPendingIntent)
                        .setAutoCancel(true);

                // unique ID for each notification TODO: make this randomly generate some number???
                int notificationId = 69;

                // show the notification to the user
                NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);

                notificationManager.notify(notificationId, notificationBuilder.build());
            }
        }

        else {
            CharSequence toastText = "Notification received without data payload:";
            SharedHelper.makeToast(this, toastText, Toast.LENGTH_LONG);
        }
    }

    @Override
    public void onDeletedMessages() {

    }
}
